import os
import sys
import datetime
import urllib2
import ephem
from dateutil import tz
from django.contrib.gis.db import models
from metar.Metar import Metar # available from http://homepage.mac.com/wtpollard/Software/FileSharing4.html
from autoslug import AutoSlugField
from django_extensions.db import fields as ext_fields
from math import radians as rad,degrees as deg
from decimal import *

class WeatherStationManager(models.GeoManager):
    def auto_poll(self):
	sys.path[0] = os.path.normpath(os.path.join(sys.path[0], '..'))
        return self.filter(auto_poll__exact=True)

class WeatherStation(models.Model):
    code = models.CharField(max_length=20, unique=True,
        help_text="""Station code (lower case).
        Use <a href="http://www.rap.ucar.edu/weather/surface/stations.txt">NOAA ICAO</a>
        when available or use an alternate code scheme.""")
    name = models.CharField(max_length=200, null=True, blank=True)
    name_override = models.CharField(max_length=200, null=True, blank=True)
    state = models.CharField(max_length=2, null=True, blank=True)
    country = models.CharField(max_length=200, null=True, blank=True)
    latitude = models.DecimalField(max_digits=11, decimal_places=6, null=True, blank=True)
    longitude = models.DecimalField(max_digits=11, decimal_places=6, null=True, blank=True)
    elevation = models.IntegerField(null=True, blank=True)
    auto_poll = models.BooleanField(default=False)
    point = models.PointField(srid=4326, null=True, blank=True)

    objects = WeatherStationManager()

    def get_name(self):
        if self.name_override:
            return self.name_override
        return self.name

    def update(self):
        """Take into account a reasonable caching schedule, and always return the newest possible information.
        As a general rule, NOAA will make new observations available once an hour. HOWEVER, at times SPECI (special updates)
        or manual corrections will be issued. At this time, this library will only support hourly retrieval."""

        last_hr = datetime.datetime.now() - datetime.timedelta(hours=1)
#	print datetime.datetime.now()
	print self.code
	print "Getting weather data from" 
	print last_hr
        reports = WeatherReport.objects.filter(station=self, observation_time__gt=last_hr)
        if reports:
            report = reports[0]
        else:
            noaa_url = 'http://weather.noaa.gov/pub/data/observations/metar/stations/%s.TXT' % self.code
            request = urllib2.Request(noaa_url, None)
            response = urllib2.urlopen(request)
            data = response.read().split('\n')[1] # NOAA includes a "real" timestamp as the first line of the response
	    print data

            report, created = WeatherReport.objects.get_or_create(station=self, raw=data)

        return report

    def __unicode__(self):
        return u'%s' % self.code

class WeatherReportManager(models.Manager):
    def twenty_four_newest(self):
        return self.order_by('-timestamp')[:24]
    def all(self, limit=None):
        return self.order_by('-timestamp')

class WeatherReport(models.Model):
    station = models.ForeignKey(WeatherStation)
    raw = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True) # keep track of when it was retrieved - necessary because METARs don't include any month/year info

#**************************************************************
#---* Weather Station / METAR data fields *-------------------*
#**************************************************************

    # denormalized data - obtainable by parsing the raw info, but stored for convenience of lookup
    observation_type = models.CharField(max_length=5, null=True, blank=True) # METAR or SPECI
    observation_mode = models.CharField(max_length=4, null=True, blank=True) # AUTO or COR (corrected)
    observation_cycle = models.IntegerField(null=True, blank=True) # a number between 0 and 23
    observation_time = models.DateTimeField(null=True, blank=True)
    wind_direction = models.IntegerField(null=True, blank=True)
    wind_compass = models.CharField(max_length=4, null=True, blank=True)
    wind_direction_from = models.IntegerField(null=True, blank=True) # used when the wind direction is variable and specified
    wind_direction_to = models.IntegerField(null=True, blank=True)   # ^^^
    wind_speed_mps = models.IntegerField(null=True, blank=True)
    wind_speed_gust_mps = models.IntegerField(null=True, blank=True)
    visibility_km = models.DecimalField(max_digits=3, decimal_places=1, null=True, blank=True)
    temperature_celsius = models.DecimalField(max_digits=4, decimal_places=1, null=True, blank=True)
    dewpoint_celsius = models.DecimalField(max_digits=4, decimal_places=1, null=True, blank=True)
    sky_conditions = models.TextField(null=True, blank=True)
    weather_conditions = models.TextField(null=True, blank=True)
    pressure_mb = models.IntegerField(null=True, blank=True)
    relative_humidity = models.IntegerField(null=True, blank=True) # (RH = 100-5(temperature_celsius - dewpoint_celsius))
#    ceiling_conditions = models.TextField(null=True, blank=True)
    max_temp_24hr = models.DecimalField(max_digits=4, decimal_places=1, null=True, blank=True)
    min_temp_24hr = models.DecimalField(max_digits=4, decimal_places=1, null=True, blank=True)
    precip_3hr = models.IntegerField(null=True, blank=True)
#**************************************************************
#---* Lunar data fields *-------------------------------------*
#**************************************************************
    
    moon_phase =  models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    moon_az =  models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    moon_alt =  models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    moon_ra =  models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    moon_dec =  models.DecimalField(max_digits=6, decimal_places=2, null=True, blank=True)
    moon_earth_distance =  models.DecimalField(max_digits=11, decimal_places=4, null=True, blank=True)
    moon_is_perigee = models.BooleanField(default=False) 
    moon_is_apogee = models.BooleanField(default=False)
    moon_in_sky =  models.BooleanField(default=False)

#**************************************************************

    objects = WeatherReportManager()

    def get_metar_object(self):
        return Metar(self.raw)

    def get_lunar_object(self):
	location = ephem.Observer()
	location.lon = self.station.longitude
	location.lat = self.station.latitude
	location.elevation = self.station.elevation
	return ephem.Moon(location)

    def save(self, **kwargs):
        "Populate all the denormalized data fields by using the metar class before saving."
        metar = self.get_metar_object()
        self.observation_time = metar.time.replace(tzinfo=tz.gettz('UTC')) # provided in UTC, set that so it shows correctly later
        self.observation_cycle = metar.cycle
        self.observation_type = metar.type
        self.observation_mode = metar.mod
        self.temperature_celsius = '%s' % metar.temp.value(units='c')
        self.temperature_fahrenheit = '%s' % metar.temp.value(units='f')
        self.dewpoint_celsius = '%s' % metar.dewpt.value(units='c')
        self.dewpoint_fahrenheit = '%s' % metar.dewpt.value(units='f')
        self.visibility_mi = '%s' % metar.vis.value(units='MI')
        self.visibility_km = '%s' % metar.vis.value(units='KM')
        self.max_temp_24hr = metar.max_temp_24hr
	self.min_temp_24hr = metar.min_temp_24hr
	self.precip_3hr = metar.precip_3hr
	if metar.wind_dir:
            self.wind_direction = '%s' % int(metar.wind_dir.value())
            self.wind_compass = metar.wind_dir.compass()
        if metar.wind_dir_from:
            self.wind_direction_from = '%s' % int(metar.wind_dir_from.value())
        if metar.wind_dir_to:
            self.wind_direction_to = '%s' % int(metar.wind_dir_to.value())
        if metar.wind_speed:
	    self.wind_speed_mps = '%s' % int(round(metar.wind_speed.value(units='mps'))) # metars will only return integers when using mps
        if metar.wind_gust:
            self.wind_speed_gust_mps = '%s' % int(metar.wind_gust.value(units='mps'))
 	self.pressure_mb = '%s' % int(metar.press.value(units="mb"))
        self.sky_conditions = '%s' % metar.sky_conditions()
	self.weather_conditions = '%s' % metar.present_weather()
	self.relative_humidity = 100-5*(metar.temp.value(units='c')-metar.dewpt.value(units='c'))
	
	moon = self.get_lunar_object() 

	print round(moon.phase,2)
        print round(deg(moon.az),2)
        print round(deg(moon.alt),2)
        print round(deg(moon.ra),2)
        print  round(deg(moon.dec),2)
        print  round(moon.earth_distance*149597870.691,4)

	self.moon_phase = round(moon.phase,2)
	self.moon_az = round(deg(moon.az),2)
	self.moon_alt = round(deg(moon.alt),2)
	self.moon_ra = round(deg(moon.ra),2)
	self.moon_dec = round(deg(moon.dec),2)
 	self.moon_earth_distance = round(moon.earth_distance*149597870.691,4)

        super(WeatherReport, self).save(**kwargs)

    def __unicode__(self):
        return u'%s' % self.raw

class Location(models.Model):
   name = models.CharField(max_length=255)

   # Automatically create slug based on the name field
   slug = AutoSlugField(populate_from='name', max_length=255)
   
   # Automatically create a unique id for this object
   uuid = ext_fields.UUIDField(auto=True)
   
   # Geo Django field to store a point
   point = models.PointField(help_text="Represented as (longitude, latitude)")

   # You MUST use GeoManager to make Geo Queries
   objects = models.GeoManager()

#class EntryImage(models.Model):  
#    image = models.ImageField(upload_to="entries")

#class Entry(models.Model):  
#    code = models.CharField(max_length=70, unique=True)  
#    images = models.ManyToManyField(EntryImage, null=True, blank=True)

